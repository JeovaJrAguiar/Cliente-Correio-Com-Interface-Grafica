
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author JEOVÁ JR
 */
public class ServidorSocket extends javax.swing.JFrame {
    private static int portaServidor = 3353;
    static ServerSocket servidor = null;
    static Socket cliente = null;
    /**
     * Creates new form ServidorSocket
     */
    public ServidorSocket() {
        initComponents();
    }
    private static void closeSocket(Socket socket){
        try {
            socket.close();
        } catch (IOException ex) {
            System.out.println("Erro ao  fechar o cliente(Socket).");
            //Logger.getLogger(ServidorSocket.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private static void startServer(){
        try {
            servidor = new ServerSocket(portaServidor);
            System.out.print("Servidor inicializado.");
        } catch (IOException ex) {
            System.out.print("Erro ao iniciar servidor: " + ex.getMessage());
            //Logger.getLogger(ServidorSocket.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private static void closeServer(){
        try {
            servidor.close();
        } catch (IOException ex) {
            System.out.println("Erro ao  fechar o servidor(ServerSocket).");
            //Logger.getLogger(ServidorSocket.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public int getPortaServer(){
        return portaServidor;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        closeServerButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        ipServer = new javax.swing.JLabel();
        portaServer = new javax.swing.JLabel();
        ipClient = new javax.swing.JLabel();
        connection = new javax.swing.JLabel();
        startServerButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("SERVER");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, -1, -1));

        jLabel2.setText("Cliente Correio v1.0.4");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, -1, -1));

        jLabel3.setText("Concexão estabelecida: ");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, -1));

        closeServerButton.setText("Close Server");
        closeServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeServerButtonActionPerformed(evt);
            }
        });
        getContentPane().add(closeServerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 380, -1, -1));

        jLabel4.setText("IP do servidor: ");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, -1, -1));

        jLabel5.setText("IP do cliente conectado:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, -1, -1));

        jLabel6.setText("Porta: ");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, -1, -1));

        ipServer.setText(" ");
        getContentPane().add(ipServer, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 250, -1));

        portaServer.setText(" ");
        getContentPane().add(portaServer, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 160, 290, -1));

        ipClient.setText(" ");
        getContentPane().add(ipClient, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 190, 200, -1));

        connection.setText(" ");
        getContentPane().add(connection, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 220, 200, -1));

        startServerButton.setText("Start Server");
        startServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startServerButtonActionPerformed(evt);
            }
        });
        getContentPane().add(startServerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 380, -1, -1));

        setSize(new java.awt.Dimension(416, 468));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void closeServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeServerButtonActionPerformed

        portaServer.setText(" - ");
        ipServer.setText(" - ");
        ipClient.setText(" - "); 
        connection.setText(" - ");
        closeServer();
    }//GEN-LAST:event_closeServerButtonActionPerformed

    private void startServerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startServerButtonActionPerformed
        String portaservidor = (String) toString(portaServidor);
        String ipserver = (String) toString(servidor.getInetAddress().getHostAddress());
        String ipclient = (String) toString(cliente.getInetAddess().getHostAddess());
        
        portaServer.setText(portaservidor);
        ipServer.setText(ipserver);
        ipClient.setText(ipclient); 
        connection.setText("connection");
    }//GEN-LAST:event_startServerButtonActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServidorSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServidorSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServidorSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServidorSocket.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServidorSocket().setVisible(true);
            }
        });
        
        //iniciamos o servico de escuta
        startServer();
        //criamos o canal de comunicacao para esse servico
        while(true){
            //System.out.println("Cliente do ip: " + cliente.getInetAddress().getHostAddress());
            System.out.print("--");
            System.out.println("Aguardando conexao.");
            try{
                cliente = servidor.accept();
                System.out.println("Cliente do ip: " + cliente.getInetAddress().getHostAddress());
                
                Scanner entrada = new Scanner(cliente.getInputStream());
                while(entrada.hasNextLine()){
                    System.out.println(entrada.nextLine());
                }
            }catch(IOException ex){
                System.out.println("Erro ao  fechar o servidor(ServerSocket).");
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeServerButton;
    private javax.swing.JLabel connection;
    private javax.swing.JLabel ipClient;
    private javax.swing.JLabel ipServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private static javax.swing.JLabel portaServer;
    private javax.swing.JButton startServerButton;
    // End of variables declaration//GEN-END:variables

    private String toString(int portaServidor) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
